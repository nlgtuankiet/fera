import java.text.SimpleDateFormat
import java.util.regex.Pattern

def hasProject = false
ext {
  allAndroidModules = [
    "domain",
    "core",
    "home",
    "browse",
    "data",
    "image",
  ]

  allUtilityModule = [
    "codegen",
    "function",
  ]

  libraryModules = [
    "domain",
    "core",
  ]

  alwaysIncludeModules = [
    "domain",
    "home",
    "core",
    "image",
    "data",
  ]

  dynamicModules = allAndroidModules.stream()
      .filter { module -> !libraryModules.contains(module) }
      .collect()
}

try {
  project
  hasProject = true
} catch (ignored) {
  hasProject = false
}

if (hasProject && project.hasProperty("dynamic")) {
  ext.dynamic = project.property("dynamic") == true || project.property("dynamic") == ""
  ext.dynamic = ext.dynamic && !libraryModules.contains(project.name)
} else {
  ext.dynamic = false
}

println "dynamic is $dynamic"

ext {
  isInCI = Boolean.parseBoolean(System.getenv().getOrDefault("CI", "false"))

  time = {
    def format = new SimpleDateFormat("HH:mm:ss")
    return format.format(new Date())
  }

  log = { message ->
    println "${time()} $message"
  }

  shouldInclude = { moduleName ->
    if (alwaysIncludeModules.contains(moduleName)) {
      return true
    }
    if (ext.has('include')) {
      return Pattern.compile(include, Pattern.CASE_INSENSITIVE).matcher(moduleName).find()
    }
    if (ext.has("exclude")) {
      return !Pattern.compile(exclude, Pattern.CASE_INSENSITIVE).matcher(moduleName).find()
    }
    return true
  }

  maybeInclude = { moduleName ->
    if (shouldInclude(moduleName)) {
      println "include :$moduleName"
      include(":$moduleName")
    }
    if (moduleName == "app") {
      include(":app")
    }
  }

  minSdk = 21
  ext.targetSdk = 28
  ext.vcode = 1
  ext.vname = "1.0"
  ext.compileSdk = 29
  ext.buildTools = "29.0.3"
}

def daggerVersion = "2.28"
def deps = [:]
ext.deps = deps
deps.dagger = "com.google.dagger:dagger:$daggerVersion"
deps.daggerAndroid = "com.google.dagger:dagger-android-support:$daggerVersion"
deps.daggerProcessor = "com.google.dagger:dagger-compiler:$daggerVersion"

deps.exec = "org.zeroturnaround:zt-exec:1.11"
deps.execKiller = "org.zeroturnaround:zt-process-killer:1.10"

deps.kotlinStdLib = "org.jetbrains.kotlin:kotlin-stdlib:1.4-M2"
deps.kotlinCoroutine = "org.jetbrains.kotlinx:kotlinx-coroutines-android:1.3.7-1.4-M2"
deps.appCompat = "androidx.appcompat:appcompat:1.1.0"
deps.fragment = "androidx.fragment:fragment-ktx:1.3.0-alpha06"
deps.inject = "javax.inject:javax.inject:1"
deps.constraintLayout = "androidx.constraintlayout:constraintlayout:1.1.3"

def navigationVersion = "2.3.0-rc01"
deps.navigation = "androidx.navigation:navigation-fragment-ktx:$navigationVersion"
deps.navigationDynamic = "androidx.navigation:navigation-dynamic-features-fragment:$navigationVersion"

deps.moshi = "com.squareup.moshi:moshi-kotlin:1.9.3"
deps.moshiProcessor = "com.squareup.moshi:moshi-kotlin-codegen:1.9.3"

deps.epoxy = "com.airbnb.android:epoxy:4.0.0-beta4"
deps.epoxyProcessor = "com.airbnb.android:epoxy-processor:4.0.0-beta4"

deps.mvrx = "com.airbnb.android:mvrx:1.5.0-SNAPSHOT"

deps.assistedInject = 'com.squareup.inject:assisted-inject-annotations:0.5.2'
deps.assistedInjectProccesor = 'com.squareup.inject:assisted-inject-processor:0.5.2'

deps.okHttp = "com.squareup.okhttp3:okhttp:4.7.2"

def addAllRepositories = { handler ->
  handler.google()
  handler.jcenter()
  handler.mavenLocal()
  handler.maven { url "https://jitpack.io" }
  handler.maven { url 'https://oss.sonatype.org/content/repositories/snapshots' }
  handler.maven { url 'https://dl.bintray.com/kotlin/kotlin-eap/' }
  handler.maven { url 'https://dl.bintray.com/kotlin/kotlinx/' }
  handler.maven { url 'https://repo.spring.io/libs-snapshot-local' }
  handler.maven { url 'https://repo.spring.io/libs-milestone-local' }
  handler.maven { url 'https://repo.spring.io/release' }
  handler.maven { url "https://repo.spring.io/milestone" }
  handler.maven { url "https://repo.spring.io/snapshot" }
}
ext.addAllRepositories = addAllRepositories

def applyKaptConfig = { handler ->
  handler.correctErrorTypes = true
  handler.useBuildCache = true
}

ext.applyKaptConfig = applyKaptConfig

def applyAndroidConfig = { handler ->
  if (project.name != "image") {
    handler.dataBinding {
      enabled = true
    }
  }
  handler.compileOptions {
    //    coreLibraryDesugaringEnabled true
    sourceCompatibility JavaVersion.VERSION_1_8
    targetCompatibility JavaVersion.VERSION_1_8
  }
  handler.kotlinOptions {
    jvmTarget = JavaVersion.VERSION_1_8.toString()
  }
  handler.compileSdkVersion 29
  handler.buildToolsVersion "29.0.3"
  handler.defaultConfig {
    minSdkVersion minSdk
    targetSdkVersion targetSdk
    versionCode vcode
    versionName vname
    testInstrumentationRunner "androidx.test.runner.AndroidJUnitRunner"
  }
  handler.lintOptions {
    checkDependencies true
    disable 'ObsoleteLintCustomCheck'
  }
  handler.buildFeatures {
    viewBinding true
  }
  handler.testOptions {
    unitTests.all {
      testLogging {
        events "passed", "skipped", "failed", "standardOut", "standardError"
        outputs.upToDateWhen { false }
        showStandardStreams = true
        exceptionFormat = 'full'
      }
    }
  }
  handler.kotlinOptions {
    jvmTarget = JavaVersion.VERSION_1_8.toString()
    freeCompilerArgs = ["-XXLanguage:+InlineClasses"]
  }
}
ext.applyAndroidConfig = applyAndroidConfig

def addAllExternalDependencies = { handler ->
  def dependencies = [
    "androidx.core:core-ktx:1.3.0",
    "androidx.multidex:multidex:2.0.1",
    deps.appCompat,
    deps.assistedInject,
    deps.constraintLayout,
    deps.dagger,
    deps.daggerAndroid,
    deps.epoxy,
    deps.exec,
    deps.execKiller,
    deps.fragment,
    deps.inject,
    deps.kotlinCoroutine,
    deps.kotlinStdLib,
    deps.moshi,
    deps.mvrx,
    deps.navigation,
    deps.navigationDynamic,
    deps.okHttp,
    'app.cash.contour:contour:0.1.7',
    'androidx.lifecycle:lifecycle-process:2.3.0-alpha04',
    'com.airbnb.android:epoxy-databinding:2.6.0',
    'com.github.bumptech.glide:glide:4.11.0',
  ]
  dependencies.forEach { d -> handler.api d }
  handler.testImplementation("junit:junit:4.12")
  handler.androidTestImplementation("androidx.test.espresso:espresso-core:3.2.0")
  handler.androidTestImplementation("androidx.test.ext:junit:1.1.1")
}
ext.addAllExternalDependencies = addAllExternalDependencies