import java.text.SimpleDateFormat
import java.util.Date

buildscript {
  apply from: "gradle/config.gradle"
  ext {
    kotlin_version = '1.3.72'
  }
  project.ext {
    dynamic = hasProperty("dynamic")
  }
  repositories { handler -> addAllRepositories(handler) }
  dependencies {
    classpath "com.android.tools.build:gradle:4.0.0"
    classpath "org.jetbrains.kotlin:kotlin-gradle-plugin:1.4-M2"
    classpath 'com.jakewharton:butterknife-gradle-plugin:10.2.1'

    // TODO refactor
    classpath "androidx.navigation:navigation-safe-args-gradle-plugin:2.3.0-rc01"
  }
}

static def time() {
  def format = new SimpleDateFormat("dd/MM/yyyy HH:mm:ss")
  return format.format(new Date())
}

static def log(message) {
  println "${time()} message"
}

plugins {
  id "com.diffplug.gradle.spotless" version "4.3.1"
}
log "init plugins"


allprojects {
  repositories { handler -> addAllRepositories(handler) }
  log "after all addAllRepositories"
  apply plugin: 'com.diffplug.gradle.spotless'
  spotless {
    kotlin {
      target '**/*.kt'
      ktlint("0.37.2").userData(
          [
            'indent_size': '2',
            'continuation_indent_size' : '4',
            'insert_final_newline' : 'true',
            'max_line_length' : '120'
          ]
          )
    }
    java {
      target '**/*.java'
      removeUnusedImports() // removes any unused imports
      googleJavaFormat('1.7')
      indentWithSpaces(2)
    }
    groovyGradle {
      // same as groovy, but for .gradle (defaults to '*.gradle')
      target '**/*.gradle'
      // the Groovy Eclipse formatter extends the Java Eclipse formatter,
      // so it formats Java files by default (unless `excludeJava` is used).
      greclipse().configFile(project.rootProject.file('scripts/greclipse.properties'))
    }
  }
  log "after spotless"
}

log "init all project"

def listProjectHasApk = []
def installApkDebug = tasks.register("installApkDebug") {
  group "install"
  description "Build base apk + feature module apk, and run adb install-multiple"
  doLast {
    def p = "./scripts/install_apk.sh devV16 debug ${listProjectHasApk.toSet().join(" ")}".execute()
    println p.text
  }
}

log "init installApkDebug"

subprojects { p ->
  log "config sub project"
  p.tasks.whenTaskAdded { task ->
    if (task.name == "assembleDebug") {
      listProjectHasApk += p.projectDir.name
      installApkDebug.configure {
        dependsOn task
      }
    }
  }
}

log "init subprojects"



