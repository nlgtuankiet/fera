buildscript {
  apply from: "gradle/config.gradle"
  ext {
    kotlin_version = '1.3.72'
  }
  project.ext {
    dynamic = hasProperty("dynamic")
  }
  repositories { handler -> addAllRepositories(handler) }
  dependencies {
    classpath "com.android.tools.build:gradle:4.0.0"
    classpath "org.jetbrains.kotlin:kotlin-gradle-plugin:1.4-M2"
    classpath 'com.jakewharton:butterknife-gradle-plugin:10.2.1'
    // TODO refactor
    classpath "androidx.navigation:navigation-safe-args-gradle-plugin:2.3.0-rc01"
  }
}

plugins {
  id "com.diffplug.gradle.spotless" version "4.3.1"
}

def isRunningSpotless = gradle.startParameter
    .taskRequests.first().args
    .find { arg -> arg.contains("spotless") } != null

allprojects {
  repositories { handler -> addAllRepositories(handler) }
  if (isRunningSpotless) {
    apply plugin: 'com.diffplug.gradle.spotless'
    spotless {
      format 'xml', {
        target fileTree('.') {
          include '**/*.xml', '**/*.xsd'
          exclude '**/build/**'
          exclude '**/.idea/**'
        }
        // Use for example eclipseWtp('xml', '4.7.3a') to specify a specific version of Eclipse,
        // available versions are: https://github.com/diffplug/spotless/tree/main/lib-extra/src/main/resources/com/diffplug/spotless/extra/eclipse_wtp_formatters
        eclipseWtp('xml').configFile "${project.rootProject.rootDir}/spotless.xml.prefs"
      }
      kotlin {
        target '**/*.kt'
        ktlint("0.37.2").userData(
            [
              'indent_size'             : '2',
              'insert_final_newline'    : 'true',
              'max_line_length'         : '120'
            ]
            )
      }
      java {
        target '**/*.java'
        removeUnusedImports() // removes any unused imports
        googleJavaFormat('1.7')
        indentWithSpaces(2)
      }
      groovyGradle {
        // same as groovy, but for .gradle (defaults to '*.gradle')
        target '**/*.gradle'
        // the Groovy Eclipse formatter extends the Java Eclipse formatter,
        // so it formats Java files by default (unless `excludeJava` is used).
        greclipse().configFile(project.rootProject.file('scripts/greclipse.properties'))
      }
    }
  }
}

def listProjectHasApk = []
def installApkDebug = tasks.register("installApkDebug") {
  group "install"
  description "Build base apk + feature module apk, and run adb install-multiple"
  doLast {
    def gap = project.hasProperty("gap")
    def p = "./scripts/install_apk.sh devV16 debug $gap ${listProjectHasApk.toSet().join(" ")}".execute()
    println p.text
  }
}


subprojects { p ->
  p.tasks.whenTaskAdded { task ->
    if (task.name == "assembleDebug") {
      listProjectHasApk += p.projectDir.name
      installApkDebug.configure {
        dependsOn task
      }
    }
  }
}


