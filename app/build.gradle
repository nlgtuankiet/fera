apply plugin: "com.android.application"
apply plugin: "kotlin-android"
apply plugin: "kotlin-kapt"
apply plugin: "androidx.navigation.safeargs.kotlin"

apply from: "../gradle/config.gradle"

kapt {
  correctErrorTypes true
}

android {
  compileOptions {
    //    coreLibraryDesugaringEnabled true
    sourceCompatibility JavaVersion.VERSION_1_8
    targetCompatibility JavaVersion.VERSION_1_8
  }
  kotlinOptions {
    jvmTarget = JavaVersion.VERSION_1_8.toString()
  }
  buildFeatures {
    viewBinding true
  }
  compileSdkVersion 29
  buildToolsVersion "29.0.3"
  testOptions {
    unitTests.all {
      testLogging {
        events "passed", "skipped", "failed", "standardOut", "standardError"
        outputs.upToDateWhen { false }
        showStandardStreams = true
        exceptionFormat = 'full'
      }
    }
  }
  defaultConfig {
    lintOptions {
      abortOnError false
    }
    multiDexEnabled true
    applicationId "com.nlgtuankiet.fera"
    minSdkVersion minSdk
    println "min sdk is $minSdk"
    targetSdkVersion targetSdk
    versionCode vcode
    versionName vname
    testInstrumentationRunner "androidx.test.runner.AndroidJUnitRunner"
  }

  signingConfigs {
    try {
      release {
        def keystoreFile = new File(rootProject.projectDir, ".keystore")
        keystoreFile.delete()
        keystoreFile.createNewFile()
        keystoreFile << env.getOrDefault("ANDROID_KEYSTORE", "").decodeBase64()
        storeFile keystoreFile
        storePassword env.getOrDefault("ANDROID_KEYSTORE_PASSWORD", "")
        keyAlias env.getOrDefault("ANDROID_KEYSTORE_ALIAS", "")
        keyPassword env.getOrDefault("ANDROID_KEYSTORE_PASSWORD", "")
      }
    } catch(Exception ignored) { }
    ci {
      storeFile new File(rootProject.projectDir, ".circleci/keystore.jks")
      storePassword "123456"
      keyAlias "DEFAULT"
      keyPassword "123456"
    }
  }


  buildTypes {
    release {
      if (isInCI) {
        signingConfig signingConfigs.ci
      } else {
        signingConfig signingConfigs.release
      }
      debuggable false
      minifyEnabled true
      proguardFiles getDefaultProguardFile('proguard-android-optimize.txt'), 'proguard-rules.pro'
    }
  }

  sourceSets {
    androidTest {
      java.srcDirs += [
        'src/test/java/com/nlgtuankiet/fera/share'
      ]
    }
  }
  if (dynamic) {
    def dynamicModules = [
      "home",
      "data",
    ]

    dynamicModules.forEach { module ->
      if (shouldInclude(module)) {
        dynamicFeatures += ":$module".toString()
      }
    }
  }
}

dependencies {
  //  coreLibraryDesugaring 'com.android.tools:desugar_jdk_libs:1.0.5'
  kapt deps.moshiProcessor
  kapt deps.daggerProcessor
  kapt deps.assistedInjectProccesor
  kaptTest deps.daggerProcessor

  api(project(":domain"))
  api(project(":core"))
  if (!dynamic) {
    api(project(":home"))
    api(project(":data"))
  }
}
dependencies { handler ->
  addAllExternalDependencies(handler)
}

